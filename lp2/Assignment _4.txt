Experiment no - 4 
Implement a solution for a Constraint Satisfaction Problem using Branch and Bound and
Backtracking for n-queens problem or a graph coloring problem. 

CODE:
class NQueens:
    def __init__(self, n):
        self.n = n
        self.board = [[0 for _ in range(n)] for _ in range(n)]

    def is_safe(self, row, col):
        for i in range(col):
            if self.board[row][i] == 1:
                return False

        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if self.board[i][j] == 1:
                return False

        for i, j in zip(range(row, self.n, 1), range(col, -1, -1)):
            if self.board[i][j] == 1:
                return False

        return True

    def solve_backtracking(self, col):
        if col >= self.n:
            return True

        for i in range(self.n):
            if self.is_safe(i, col):
                self.board[i][col] = 1

                if self.solve_backtracking(col + 1):
                    return True

                self.board[i][col] = 0

        return False

    def solve_branch_and_bound(self):
        def backtrack(col):
            if col >= self.n:
                return True

            for i in range(self.n):
                if self.is_safe(i, col):
                    self.board[i][col] = 1

                    if backtrack(col + 1):
                        return True

                    self.board[i][col] = 0

            return False

        if not backtrack(0):
            return False
        return True

    def print_solution(self):
        for row in self.board:
            print(' '.join(map(str, row)))


# Example usage
n_queens = NQueens(8)  # Change 8 to desired size
if n_queens.solve_backtracking(0):
    print("Backtracking Solution:")
    n_queens.print_solution()
else:
    print("No solution exists")

n_queens = NQueens(8)  # Change 8 to desired size
if n_queens.solve_branch_and_bound():
    print("\nBranch and Bound Solution:")
    n_queens.print_solution()
else:
    print("No solution exists")


OUTPUT:
Backtracking Solution:
1 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 1
0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0
0 0 1 0 0 0 0 0

Branch and Bound Solution:
1 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 1
0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0
0 0 1 0 0 0 0 0

